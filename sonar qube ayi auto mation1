pipeline {
    agent any

    tools {
        maven 'maven'  // Ensure this matches Jenkins tool config
    }

    environment {
        IMAGE_NAME = 'vmns/dockerdcicd'
        CREDENTIALS_ID = 'docker'
        SONARQUBE_SERVER = 'sonar'
        SONAR_PROJECT_KEY = 'sonar'
        SONAR_PROJECT_NAME = 'sonar'
        SONAR_HOST_URL ='http://13.59.133.23:9000'  // removed leading space!
        SONAR_LOGIN = 'cc4667515660a49374eb3fd94f958ccd171d2b07'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Mani137/E-commerce.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_LOGIN}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}










pipeline docker script normal.script.

pipeline {
    agent any
    
    tools {
        maven 'maven-login'
    }    
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch:'main', url: 'https://github.com/Ekavitha123/e-commerce-login.git'
            }
        }
    
        stage('Build with Maven-l0gin') {
            steps {
                sh 'mvn clean install'
            }
        }
    }
}




docker manual script


!#/bin/bash/
cd /opt/meeshow/target/
docker build -t e-login .
docker stop e-login
docker rm e-login
docker run -dt --name e-login -p 8082:8080 e-login



docker and sonar script 2 okedanike 


pipeline {
    agent any

    tools {
        maven 'maven'
    }

    environment {
        IMAGE_NAME = 'kavitha142/spring1'
        CREDENTIALS_ID = 'docker'
        SONARQUBE_SERVER = 'sonar'
        SONAR_PROJECT_KEY = 'sonar'
        SONAR_PROJECT_NAME = 'sonar'
        SONAR_HOST_URL = 'http://13.200.217.122:9000/'
        SONAR_LOGIN = 'a8ff762e0181d69b2fcee554ae54880852dafaa4'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Ekavitha123/E-commerce.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        mvn sonar:sonar \
                        -DskipTests \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_LOGIN}
                    """
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker build -t ${IMAGE_NAME} ."
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push ${IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    sh "docker rm -f conty || true"
                    sh "docker run -dt --name conty -p 8082:8080 ${IMAGE_NAME}"
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed. Check logs and test results.'
        }
    }
}
